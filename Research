FIND THE BASE MEMORY ADDRESS
	MACOS:
		use "sample <filename> 1 2>/dev/null | grep Load" in terminal and get output with popen
	LINUX:
		call function dl_iterate_phdr(<function_name>, 0) and store te base offset into global variable

FIND FUNCTION SYMBOL ADDRESSES:
	"nm --defined-only <filename>"

__attribute__((no_instrument_function)) : Stop the global wrapper from being called in this specific function

gcc -finstrument-functions: generates a wrapper to every function

If I subtract the base address to the value recieved as "this_fn" I get the function offset address, which can be compared to the symbol table to get the function name

command for cub3 with timetracer on Linux:
	gcc src/*/*.c timetracer/*.c build/libmlx42.a -o test -lglfw -lm -ldl -g -finstrument-functions -I includes
command for minishell with timetracer on Mac:
	gcc timetracer/*.c src/*.c src/*/*.c -finstrument-functions -g -o test -I/Users/lmuzio/.brew/opt/readline/include -Iincludes -lreadline -L/Users/lmuzio/.brew/opt/readline/lib -pthread

TODO add depth to times variable for different groupings

could show nested grouped functions through multiple depths of [ or ]

the amount of t_grouptimes for every node should be the same, because if the sequence of functions is:
m
  a
    b
    b
  a
    b
    b
  a
    b
    b
  c
  c
  c

then the grouping should be

m
  a       ]*3
    b *2  ]
  c * 3
  
in the case the nested repetition is repeated twice like this output

m
  a       ]*3
    b *2  ]
  c * 3
  a       ]*3
    b *2  ]
  c * 3

 the grouping should be

m
  a       ]3 ]2
    b * 2 ]  ]
  c * 3      ]

list of values inside times linked list:
m: 1->1->1
a: 1->3->2
b: 2->3->2
c: 3->1->2

output after grouping is already grouped in different levels, this solution won't work

trying to save distance at grouping time inside linked list
